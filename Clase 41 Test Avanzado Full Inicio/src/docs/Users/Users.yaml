paths:
  /api/users:
    get:
      tags:
        - Users
      summary: Get All Users from the DB
      responses:
        "200":
          description: Users fetched successfully from the DB
          content:
            application/json:
              schema:
                $ref: '#components/schemas/UsersResponse'
        "500":
          description: Internal Server Error
  /api/users/{userId}:
    get:
      tags:
        - Users
      summary: Get a single user by their id
      parameters:
        - name: userId
          in: path
          required: true
          description: User id to fetch
          schema:
            $type: string
      responses:
        "200":
          description: User from DB with the given userId
          content:
            application/json:
              schema:
                $ref: '#components/schemas/UserResponse'
        "404":
          description: User with given userId Not Found
        "500":
          description: Internal server error
    put:
      tags:
        - Users
      summary: Updates a single user for a given userId
      parameters:
        - name: userId
          in: path
          required: true
          description: User id to fetch
          schema:
            $type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/UpdateUserPayload'
      responses:
        "200":
          description: Updated user with a given userId
          content:
            application/json:
              schema:
                $ref: '#components/schemas/UserResponse'
        "400":
          description: Invalid body format.
        "404":
          description: User with given userId Not Found
        "500":
          description: Internal Server Error

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Autogenerated MongoDB ID
        first_name:
          type: string
          description: User First Name
        last_name:
          type: string
          description: User Last Name
        email:
          type: string
          description: User email (Unique field)
        password:
          type: string
          description: User hashed Password
      example:
        _id: ObjectId(123abc456efg)
        first_name: Horuhe
        last_name: Maro
        email: horuhe@gmail.com
        password: $57623tjadvghqwvd7#761526398jsb
    
    UsersResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          description: Users response status
        payload:
          type: array
          description: Users array list
          items:
            $ref: '#components/schemas/User'

    UserResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          description: Users response status
        payload:
          $ref: '#components/schemas/User'
  
  requestBodies:
    UpdateUserPayload:
      type: object
      properties:
        first_name:
          type: string
          description: User First Name
        last_name:
          type: string
          description: User Last Name
        email:
          type: string
          description: User email (Unique field)
        password:
          type: string
          description: User password
      example:
        first_name: Horuhe
        last_name: Maro
        email: horuhe@gmail.com
        password: 123abc456